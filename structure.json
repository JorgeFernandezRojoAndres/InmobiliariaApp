{
  "Controllers": {
    "ContratosController.cs": "using Microsoft.AspNetCore.Mvc;\r\nusing Microsoft.AspNetCore.Mvc.Rendering;\r\nusing InmobiliariaApp.Models;\r\nusing InmobiliariaApp.Repository;\r\n\r\nnamespace InmobiliariaApp.Controllers\r\n{\r\n    public class ContratosController : Controller\r\n    {\r\n        private readonly IRepoContrato repo;\r\n        private readonly RepoPersona repoPersona;\r\n        private readonly RepoInmueble repoInmueble;\r\n\r\n        public ContratosController(IRepoContrato repo, RepoPersona repoPersona, RepoInmueble repoInmueble)\r\n        {\r\n            this.repo = repo;\r\n            this.repoPersona = repoPersona;\r\n            this.repoInmueble = repoInmueble;\r\n        }\r\n\r\n        public IActionResult Index(DateTime? inicio, DateTime? fin)\r\n{\r\n    IList<Contrato> contratos;\r\n\r\n    if (inicio.HasValue && fin.HasValue && inicio <= fin)\r\n    {\r\n        contratos = repo.ObtenerVigentesEntre(inicio.Value, fin.Value);\r\n        ViewData[\"Title\"] = $\"Contratos vigentes entre {inicio:dd/MM/yyyy} y {fin:dd/MM/yyyy}\";\r\n    }\r\n    else\r\n    {\r\n        contratos = repo.ObtenerTodos();\r\n        ViewData[\"Title\"] = \"Contratos\";\r\n    }\r\n\r\n    return View(contratos);\r\n}\r\n        public IActionResult Renovar(int id)\r\n{\r\n    var original = repo.ObtenerPorId(id);\r\n    if (original == null) return NotFound();\r\n\r\n    // Nuevo contrato precargado\r\n    var nuevo = new Contrato\r\n    {\r\n        IdInquilino = original.IdInquilino,\r\n        IdInmueble = original.IdInmueble,\r\n        MontoMensual = original.MontoMensual,\r\n        Estado = \"Vigente\",\r\n        // 🚨 Importante: no copiamos las fechas, dejamos sugerencia\r\n        FechaInicio = original.FechaFin.AddDays(1),\r\n        FechaFin = original.FechaFin.AddYears(1)\r\n    };\r\n\r\n    // Pasamos los selects de inquilinos e inmuebles\r\n    CargarSelects(nuevo.IdInquilino, nuevo.IdInmueble);\r\n\r\n    return View(\"Create\", nuevo);\r\n}\r\n\r\n        public IActionResult PorInmueble(int id)\r\n{\r\n    var lista = repo.ObtenerPorInmueble(id);\r\n    if (!lista.Any())\r\n    {\r\n        TempData[\"Mensaje\"] = \"Este inmueble no tiene contratos registrados.\";\r\n    }\r\n    ViewData[\"Title\"] = \"Contratos del Inmueble\";\r\n    return View(\"Index\", lista); // reutilizamos Index.cshtml\r\n}\r\n\r\n        public IActionResult Details(int id)\r\n        {\r\n            var contrato = repo.ObtenerPorId(id);\r\n            if (contrato == null) return NotFound();\r\n            return View(contrato);\r\n        }\r\n\r\n        // GET: Contratos/Create\r\n        public IActionResult Create()\r\n        {\r\n            CargarSelects();\r\n            return View();\r\n        }\r\n        [HttpPost]\r\n        [ValidateAntiForgeryToken]\r\n        public IActionResult Create(Contrato contrato)\r\n        {\r\n            if (ModelState.IsValid)\r\n            {\r\n              \r\n                \r\n                try\r\n                {\r\n                    repo.Crear(contrato);\r\n                    return RedirectToAction(nameof(Index));\r\n                }\r\n                catch (MySql.Data.MySqlClient.MySqlException ex)\r\n                {\r\n                    // Trigger lanzó SIGNAL\r\n                    ModelState.AddModelError(\"\", ex.Message);\r\n                }\r\n            }\r\n\r\n            // Recargar selects\r\n            CargarSelects(contrato.IdInquilino, contrato.IdInmueble);\r\n            return View(contrato);\r\n        }\r\n\r\n\r\n\r\n        public IActionResult Edit(int id)\r\n        {\r\n            var contrato = repo.ObtenerPorId(id);\r\n            if (contrato == null) return NotFound();\r\n\r\n            CargarSelects(contrato.IdInquilino, contrato.IdInmueble);\r\n            return View(contrato);\r\n        }\r\n\r\n        [HttpPost]\r\n        [ValidateAntiForgeryToken]\r\n        public IActionResult Edit(int id, Contrato contrato)\r\n        {\r\n            if (id != contrato.Id) return NotFound();\r\n\r\n            if (ModelState.IsValid)\r\n            {\r\n                try\r\n                {\r\n                    repo.Editar(contrato);\r\n                    return RedirectToAction(nameof(Index));\r\n                }\r\n                catch (ArgumentException ex)\r\n                {\r\n                    ModelState.AddModelError(\"\", ex.Message);\r\n                }\r\n            }\r\n\r\n            CargarSelects(contrato.IdInquilino, contrato.IdInmueble);\r\n            return View(contrato);\r\n        }\r\n\r\n        public IActionResult Delete(int id)\r\n        {\r\n            var contrato = repo.ObtenerPorId(id);\r\n            if (contrato == null) return NotFound();\r\n            return View(contrato);\r\n        }\r\n\r\n        [HttpPost, ActionName(\"Delete\")]\r\n        [ValidateAntiForgeryToken]\r\n        public IActionResult DeleteConfirmed(int id)\r\n        {\r\n            var contrato = repo.ObtenerPorId(id);\r\n            if (contrato == null) return NotFound();\r\n\r\n            // 🔹 Si ya venció -> marcar como vencido\r\n            if (contrato.FechaFin <= DateTime.Now)\r\n            {\r\n                contrato.Estado = \"Vencido\";\r\n                repo.Editar(contrato); // Solo actualizamos estado\r\n            }\r\n            else\r\n            {\r\n                // 🔹 Si aún está vigente -> se elimina realmente\r\n                repo.Eliminar(id);\r\n            }\r\n\r\n            return RedirectToAction(nameof(Index));\r\n        }\r\n        [HttpGet]\r\npublic IActionResult VigentesEntreFechas(DateTime? inicio, DateTime? fin)\r\n{\r\n    if (!inicio.HasValue || !fin.HasValue)\r\n    {\r\n        ViewData[\"Title\"] = \"Buscar contratos vigentes entre fechas\";\r\n        return View(new List<Contrato>());\r\n    }\r\n\r\n    if (inicio > fin)\r\n    {\r\n        ModelState.AddModelError(\"\", \"La fecha de inicio no puede ser mayor que la fecha fin.\");\r\n        return View(new List<Contrato>());\r\n    }\r\n\r\n    var lista = repo.ObtenerVigentesEntre(inicio.Value, fin.Value);\r\n    ViewData[\"Title\"] = $\"Contratos vigentes entre {inicio:dd/MM/yyyy} y {fin:dd/MM/yyyy}\";\r\n    return View(lista);\r\n}\r\n\r\n        // 🔹 Método privado para no repetir código\r\n        private void CargarSelects(int? inquilinoId = null, int? inmuebleId = null)\r\n        {\r\n            var inquilinos = repoPersona.ObtenerInquilinos()\r\n                .Select(i => new\r\n                {\r\n                    Id = i.Id,\r\n                    Display = $\"{i.Nombre} {i.Apellido} - DNI {i.Documento}\"\r\n                }).ToList();\r\n\r\n            var inmueblesLista = repoInmueble.Obtener()\r\n                .Select(im => new\r\n                {\r\n                    Id = im.Id,\r\n                    Display = $\"{im.Direccion} - {im.Tipo} (${im.Precio}) - Propietario: {im.NombrePropietario}\"\r\n                }).ToList();\r\n\r\n            ViewBag.Inquilinos = new SelectList(inquilinos, \"Id\", \"Display\", inquilinoId);\r\n            ViewBag.Inmuebles = new SelectList(inmueblesLista, \"Id\", \"Display\", inmuebleId);\r\n        }\r\n\r\n        \r\n    }\r\n}\r\n"
  },
  "Models": {
    "Contrato.cs": "using System;\r\n\r\nnamespace InmobiliariaApp.Models\r\n{\r\n    public class Contrato\r\n    {\r\n        public int Id { get; set; }\r\n\r\n        public int IdInquilino { get; set; }\r\n        public Inquilino? Inquilino { get; set; }\r\n\r\n        public int IdInmueble { get; set; }\r\n        public Inmueble? Inmueble { get; set; }\r\n\r\n        public DateTime FechaInicio { get; set; }\r\n        public DateTime FechaFin { get; set; }\r\n\r\n        public decimal MontoMensual { get; set; }\r\n\r\n        public string Estado { get; set; } = \"Vigente\";\r\n\r\n        // 🔹 Auditoría\r\n        public int CreadoPor { get; set; }                  // Id del usuario que lo creó\r\n        public Usuario? UsuarioCreador { get; set; }        // Usuario creador (JOIN con tabla usuarios)\r\n        public int? TerminadoPor { get; set; }              // Id del usuario que lo terminó (nullable)\r\n        public Usuario? UsuarioTerminador { get; set; }     // Usuario terminador (JOIN con tabla usuarios)\r\n\r\n        // 🔹 Propiedad calculada para mostrar en dropdowns y vistas\r\n        public string Descripcion\r\n        {\r\n            get\r\n            {\r\n                var inmueble = Inmueble != null ? Inmueble.Direccion : $\"Inmueble {IdInmueble}\";\r\n                return $\"Contrato #{Id} - {inmueble} - {FechaInicio:dd/MM/yyyy} a {FechaFin:dd/MM/yyyy} (${MontoMensual:N2})\";\r\n            }\r\n        }\r\n    }\r\n}\r\n"
  },
  "Repository": {
    "IRepoContrato.cs": "using System;\r\nusing System.Collections.Generic;\r\nusing InmobiliariaApp.Models;\r\n\r\nnamespace InmobiliariaApp.Repository\r\n{\r\n    public interface IRepoContrato\r\n    {\r\n        IList<Contrato> ObtenerTodos();\r\n        Contrato? ObtenerPorId(int id);\r\n        IList<Contrato> ObtenerPorInmueble(int inmuebleId);\r\n\r\n        int Crear(Contrato contrato);\r\n        int Editar(Contrato contrato);\r\n        int Eliminar(int id);\r\n\r\n        // 🔹 Nuevo método para promoción\r\n        IList<Contrato> ObtenerVigentesEntre(DateTime inicio, DateTime fin);\r\n\r\n        // 🔹 Ya lo usás en RepoContrato (cuando marcás contratos vencidos)\r\n        int MarcarComoVencido(int id);\r\n    }\r\n}\r\n",
    "RepoContrato.cs": "using System;\r\nusing System.Collections.Generic;\r\nusing MySql.Data.MySqlClient;\r\nusing InmobiliariaApp.Models;\r\n\r\nnamespace InmobiliariaApp.Repository\r\n{\r\n    public class RepoContrato : IRepoContrato\r\n    {\r\n        private readonly string connectionString = \"server=localhost;user=root;password=jorge007;database=mi_base_datos;\";\r\n        public IList<Contrato> ObtenerPorInmueble(int inmuebleId)\r\n        {\r\n            var lista = new List<Contrato>();\r\n\r\n            using (var connection = new MySqlConnection(connectionString))\r\n            {\r\n                var sql = @\"SELECT c.Id, c.FechaInicio, c.FechaFin, c.MontoMensual, c.Estado,\r\n                           i.ID as InmuebleID, i.Direccion, i.Tipo, i.Precio,\r\n                           p.ID as InquilinoID, p.Nombre, p.Apellido, p.DNI\r\n                    FROM contratos c\r\n                    INNER JOIN inmuebles i ON c.InmuebleID = i.ID\r\n                    INNER JOIN personas p ON c.InquilinoID = p.ID\r\n                    WHERE i.ID = @inmuebleId\";\r\n\r\n                using (var command = new MySqlCommand(sql, connection))\r\n                {\r\n                    command.Parameters.AddWithValue(\"@inmuebleId\", inmuebleId);\r\n                    connection.Open();\r\n                    var reader = command.ExecuteReader();\r\n                    while (reader.Read())\r\n                    {\r\n                        lista.Add(new Contrato\r\n                        {\r\n                            Id = reader.GetInt32(\"Id\"),\r\n                            FechaInicio = reader.GetDateTime(\"FechaInicio\"),\r\n                            FechaFin = reader.GetDateTime(\"FechaFin\"),\r\n                            MontoMensual = reader.GetDecimal(\"MontoMensual\"),\r\n                            Estado = reader.GetString(\"Estado\"),\r\n                            Inmueble = new Inmueble\r\n                            {\r\n                                Id = reader.GetInt32(\"InmuebleID\"),\r\n                                Direccion = reader.GetString(\"Direccion\"),\r\n                                Tipo = reader.GetString(\"Tipo\"),\r\n                                Precio = reader.GetDecimal(\"Precio\")\r\n                            },\r\n                            Inquilino = new Inquilino\r\n                            {\r\n                                Id = reader.GetInt32(\"InquilinoID\"),\r\n                                Nombre = reader.GetString(\"Nombre\"),\r\n                                Apellido = reader.GetString(\"Apellido\"),\r\n                                Documento = reader.GetString(\"DNI\")\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            return lista;\r\n        }\r\n\r\n        public IList<Contrato> ObtenerTodos()\r\n        {\r\n            var lista = new List<Contrato>();\r\n\r\n            using (var connection = new MySqlConnection(connectionString))\r\n            {\r\n                var sql = @\"SELECT c.Id, c.FechaInicio, c.FechaFin, c.MontoMensual, c.Estado,\r\n                                   i.ID as InmuebleID, i.Direccion, i.Tipo, i.Precio,\r\n                                   p.ID as InquilinoID, p.Nombre, p.Apellido, p.DNI\r\n                            FROM contratos c\r\n                            INNER JOIN inmuebles i ON c.InmuebleID = i.ID\r\n                            INNER JOIN personas p ON c.InquilinoID = p.ID;\";\r\n\r\n                using (var command = new MySqlCommand(sql, connection))\r\n                {\r\n                    connection.Open();\r\n                    var reader = command.ExecuteReader();\r\n                    while (reader.Read())\r\n                    {\r\n                        var contrato = new Contrato\r\n                        {\r\n                            Id = reader.GetInt32(\"Id\"),\r\n                            FechaInicio = reader.GetDateTime(\"FechaInicio\"),\r\n                            FechaFin = reader.GetDateTime(\"FechaFin\"),\r\n                            MontoMensual = reader.GetDecimal(\"MontoMensual\"),\r\n                            Estado = reader.GetString(\"Estado\"),\r\n                            Inmueble = new Inmueble\r\n                            {\r\n                                Id = reader.GetInt32(\"InmuebleID\"),\r\n                                Direccion = reader.GetString(\"Direccion\"),\r\n                                Tipo = reader.GetString(\"Tipo\"),\r\n                                Precio = reader.GetDecimal(\"Precio\")\r\n                            },\r\n                            Inquilino = new Inquilino\r\n                            {\r\n                                Id = reader.GetInt32(\"InquilinoID\"),\r\n                                Nombre = reader.GetString(\"Nombre\"),\r\n                                Apellido = reader.GetString(\"Apellido\"),\r\n                                Documento = reader.GetString(\"DNI\")\r\n                            }\r\n                        };\r\n\r\n                        // 🔹 Si ya venció, lo actualizamos automáticamente\r\n                        if (contrato.FechaFin < DateTime.Now && contrato.Estado == \"Vigente\")\r\n                        {\r\n                            MarcarComoVencido(contrato.Id);\r\n                            contrato.Estado = \"Vencido\";\r\n                        }\r\n\r\n                        lista.Add(contrato);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return lista;\r\n        }\r\n\r\n        public Contrato? ObtenerPorId(int id)\r\n        {\r\n            Contrato? contrato = null;\r\n\r\n            using (var connection = new MySqlConnection(connectionString))\r\n            {\r\n                var sql = @\"SELECT c.Id, c.FechaInicio, c.FechaFin, c.MontoMensual, c.Estado,\r\n                           i.ID as InmuebleID, i.Direccion, i.Tipo, i.Precio,\r\n                           p.ID as InquilinoID, p.Nombre, p.Apellido, p.DNI,\r\n                           c.CreadoPor, c.TerminadoPor,\r\n                           u1.Id AS CreadorId, u1.Nombre AS CreadorNombre, u1.Apellido AS CreadorApellido,\r\n                           u2.Id AS TerminadorId, u2.Nombre AS TerminadorNombre, u2.Apellido AS TerminadorApellido\r\n                    FROM contratos c\r\n                    INNER JOIN inmuebles i ON c.InmuebleID = i.ID\r\n                    INNER JOIN personas p ON c.InquilinoID = p.ID\r\n                    LEFT JOIN usuarios u1 ON c.CreadoPor = u1.Id\r\n                    LEFT JOIN usuarios u2 ON c.TerminadoPor = u2.Id\r\n                    WHERE c.Id = @id\";\r\n\r\n                using (var command = new MySqlCommand(sql, connection))\r\n                {\r\n                    command.Parameters.AddWithValue(\"@id\", id);\r\n                    connection.Open();\r\n                    var reader = command.ExecuteReader();\r\n                    if (reader.Read())\r\n                    {\r\n                        contrato = new Contrato\r\n                        {\r\n                            Id = reader.GetInt32(\"Id\"),\r\n                            FechaInicio = reader.GetDateTime(\"FechaInicio\"),\r\n                            FechaFin = reader.GetDateTime(\"FechaFin\"),\r\n                            MontoMensual = reader.GetDecimal(\"MontoMensual\"),\r\n                            Estado = reader.GetString(\"Estado\"),\r\n                            IdInquilino = reader.GetInt32(\"InquilinoID\"),\r\n                            IdInmueble = reader.GetInt32(\"InmuebleID\"),\r\n\r\n                            Inmueble = new Inmueble\r\n                            {\r\n                                Id = reader.GetInt32(\"InmuebleID\"),\r\n                                Direccion = reader.GetString(\"Direccion\"),\r\n                                Tipo = reader.GetString(\"Tipo\"),\r\n                                Precio = reader.GetDecimal(\"Precio\")\r\n                            },\r\n                            Inquilino = new Inquilino\r\n                            {\r\n                                Id = reader.GetInt32(\"InquilinoID\"),\r\n                                Nombre = reader.GetString(\"Nombre\"),\r\n                                Apellido = reader.GetString(\"Apellido\"),\r\n                                Documento = reader.GetString(\"DNI\")\r\n                            },\r\n                            CreadoPor = reader[\"CreadoPor\"] != DBNull.Value ? Convert.ToInt32(reader[\"CreadoPor\"]) : 0,\r\n                            TerminadoPor = reader[\"TerminadoPor\"] != DBNull.Value ? Convert.ToInt32(reader[\"TerminadoPor\"]) : (int?)null,\r\n\r\n                            UsuarioCreador = reader[\"CreadorId\"] != DBNull.Value\r\n                                ? new Usuario\r\n                                {\r\n                                    Id = Convert.ToInt32(reader[\"CreadorId\"]),\r\n                                    Nombre = reader[\"CreadorNombre\"].ToString() ?? \"\",\r\n                                    Apellido = reader[\"CreadorApellido\"].ToString() ?? \"\"\r\n                                }\r\n                                : null,\r\n\r\n                            UsuarioTerminador = reader[\"TerminadorId\"] != DBNull.Value\r\n                                ? new Usuario\r\n                                {\r\n                                    Id = Convert.ToInt32(reader[\"TerminadorId\"]),\r\n                                    Nombre = reader[\"TerminadorNombre\"].ToString() ?? \"\",\r\n                                    Apellido = reader[\"TerminadorApellido\"].ToString() ?? \"\"\r\n                                }\r\n                                : null\r\n                        };\r\n\r\n                        // 🔹 Si venció, actualizar en BD\r\n                        if (contrato.FechaFin < DateTime.Now && contrato.Estado == \"Vigente\")\r\n                        {\r\n                            MarcarComoVencido(contrato.Id);\r\n                            contrato.Estado = \"Vencido\";\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return contrato;\r\n        }\r\n\r\n        public int Crear(Contrato contrato)\r\n        {\r\n            if (contrato.IdInquilino == 0 || contrato.IdInmueble == 0)\r\n                throw new ArgumentException(\"Debe seleccionar un inquilino y un inmueble válidos.\");\r\n\r\n            using (var connection = new MySqlConnection(connectionString))\r\n            {\r\n                var sql = @\"INSERT INTO contratos (InquilinoID, InmuebleID, FechaInicio, FechaFin, MontoMensual, Estado)\r\n                    VALUES (@inquilino, @inmueble, @inicio, @fin, @monto, @estado);\r\n                    SELECT LAST_INSERT_ID();\";\r\n\r\n                using (var command = new MySqlCommand(sql, connection))\r\n                {\r\n                    command.Parameters.AddWithValue(\"@inquilino\", contrato.IdInquilino);\r\n                    command.Parameters.AddWithValue(\"@inmueble\", contrato.IdInmueble);\r\n                    command.Parameters.AddWithValue(\"@inicio\", contrato.FechaInicio);\r\n                    command.Parameters.AddWithValue(\"@fin\", contrato.FechaFin);\r\n                    command.Parameters.AddWithValue(\"@monto\", contrato.MontoMensual);\r\n                    command.Parameters.AddWithValue(\"@estado\", contrato.Estado);\r\n\r\n                    connection.Open();\r\n                    var res = Convert.ToInt32(command.ExecuteScalar());\r\n                    contrato.Id = res;\r\n                    return res;\r\n                }\r\n            }\r\n        }\r\n\r\n        public IList<Contrato> ObtenerVigentesEntre(DateTime inicio, DateTime fin)\r\n        {\r\n            var lista = new List<Contrato>();\r\n\r\n            using (var connection = new MySqlConnection(connectionString))\r\n            {\r\n                var sql = @\"\r\n            SELECT c.Id, c.FechaInicio, c.FechaFin, c.MontoMensual, c.Estado,\r\n                   i.ID as InmuebleID, i.Direccion, i.Tipo, i.Precio,\r\n                   p.ID as InquilinoID, p.Nombre, p.Apellido, p.DNI\r\n            FROM contratos c\r\n            INNER JOIN inmuebles i ON c.InmuebleID = i.ID\r\n            INNER JOIN personas p ON c.InquilinoID = p.ID\r\n            WHERE UPPER(c.Estado) = 'VIGENTE'\r\n              AND (\r\n                   (@inicio BETWEEN c.FechaInicio AND c.FechaFin)\r\n                OR (@fin BETWEEN c.FechaInicio AND c.FechaFin)\r\n                OR (c.FechaInicio BETWEEN @inicio AND @fin)\r\n              );\";\r\n\r\n                using (var command = new MySqlCommand(sql, connection))\r\n                {\r\n                    command.Parameters.AddWithValue(\"@inicio\", inicio);\r\n                    command.Parameters.AddWithValue(\"@fin\", fin);\r\n\r\n                    connection.Open();\r\n                    var reader = command.ExecuteReader();\r\n\r\n                    while (reader.Read())\r\n                    {\r\n                        var contrato = new Contrato\r\n                        {\r\n                            Id = reader.GetInt32(\"Id\"),\r\n                            FechaInicio = reader.GetDateTime(\"FechaInicio\"),\r\n                            FechaFin = reader.GetDateTime(\"FechaFin\"),\r\n                            MontoMensual = reader.GetDecimal(\"MontoMensual\"),\r\n                            Estado = reader.GetString(\"Estado\"),\r\n                            Inmueble = new Inmueble\r\n                            {\r\n                                Id = reader.GetInt32(\"InmuebleID\"),\r\n                                Direccion = reader.GetString(\"Direccion\"),\r\n                                Tipo = reader.GetString(\"Tipo\"),\r\n                                Precio = reader.GetDecimal(\"Precio\")\r\n                            },\r\n                            Inquilino = new Inquilino\r\n                            {\r\n                                Id = reader.GetInt32(\"InquilinoID\"),\r\n                                Nombre = reader.GetString(\"Nombre\"),\r\n                                Apellido = reader.GetString(\"Apellido\"),\r\n                                Documento = reader.GetString(\"DNI\")\r\n                            }\r\n                        };\r\n\r\n                        lista.Add(contrato);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return lista;\r\n        }\r\n\r\n\r\n\r\n        public int MarcarComoVencido(int id)\r\n        {\r\n            int res = -1;\r\n            using (var connection = new MySqlConnection(connectionString))\r\n            {\r\n                var sql = \"UPDATE contratos SET Estado = 'Vencido' WHERE Id = @id\";\r\n                using (var command = new MySqlCommand(sql, connection))\r\n                {\r\n                    command.Parameters.AddWithValue(\"@id\", id);\r\n                    connection.Open();\r\n                    res = command.ExecuteNonQuery();\r\n                }\r\n            }\r\n            return res;\r\n        }\r\n\r\n        public int Editar(Contrato contrato)\r\n        {\r\n            if (contrato.IdInquilino == 0 || contrato.IdInmueble == 0)\r\n                throw new ArgumentException(\"Debe seleccionar un inquilino y un inmueble válidos.\");\r\n\r\n            int res;\r\n            using (var connection = new MySqlConnection(connectionString))\r\n            {\r\n                var sql = @\"UPDATE contratos \r\n                            SET InquilinoID=@inquilino, InmuebleID=@inmueble, FechaInicio=@inicio, FechaFin=@fin,\r\n                                MontoMensual=@monto, Estado=@estado\r\n                            WHERE Id=@id\";\r\n                using (var command = new MySqlCommand(sql, connection))\r\n                {\r\n                    command.Parameters.AddWithValue(\"@inquilino\", contrato.IdInquilino);\r\n                    command.Parameters.AddWithValue(\"@inmueble\", contrato.IdInmueble);\r\n                    command.Parameters.AddWithValue(\"@inicio\", contrato.FechaInicio);\r\n                    command.Parameters.AddWithValue(\"@fin\", contrato.FechaFin);\r\n                    command.Parameters.AddWithValue(\"@monto\", contrato.MontoMensual);\r\n                    command.Parameters.AddWithValue(\"@estado\", contrato.Estado);\r\n                    command.Parameters.AddWithValue(\"@id\", contrato.Id);\r\n\r\n                    connection.Open();\r\n                    res = command.ExecuteNonQuery();\r\n                }\r\n            }\r\n\r\n            return res;\r\n        }\r\n\r\n        public int Eliminar(int id)\r\n        {\r\n            // 🔹 Si está vencido lo dejamos en BD, si no venció, se elimina\r\n            using (var contrato = new MySqlConnection(connectionString))\r\n            {\r\n                contrato.Open();\r\n                var checkSql = \"SELECT FechaFin FROM contratos WHERE Id=@id\";\r\n                using (var checkCmd = new MySqlCommand(checkSql, contrato))\r\n                {\r\n                    checkCmd.Parameters.AddWithValue(\"@id\", id);\r\n                    var fechaFin = checkCmd.ExecuteScalar();\r\n\r\n                    if (fechaFin != null && Convert.ToDateTime(fechaFin) < DateTime.Now)\r\n                    {\r\n                        return MarcarComoVencido(id);\r\n                    }\r\n                }\r\n            }\r\n\r\n            int res;\r\n            using (var connection = new MySqlConnection(connectionString))\r\n            {\r\n                var sql = \"DELETE FROM contratos WHERE Id=@id\";\r\n                using (var command = new MySqlCommand(sql, connection))\r\n                {\r\n                    command.Parameters.AddWithValue(\"@id\", id);\r\n                    connection.Open();\r\n                    res = command.ExecuteNonQuery();\r\n                }\r\n            }\r\n            return res;\r\n        }\r\n    }\r\n}\r\n"
  }
}